{"version":3,"sources":["components/Button.js","components/Display.js","components/Calculator.js","App.js","index.js"],"names":["Button","type","onClick","label","active","isKeyPressed","className","Display","curValue","Calculator","buttonWidth","useState","setCurValue","clearState","setClearState","prevValueState","setPrevValueState","storedOp","setStoredOp","activeOp","setActiveOp","storedValue","setStoredValue","useEffect","handleKeyDown","e","console","log","key","isNaN","parseInt","setCurValueFunction","multiply","add","subtract","divide","equalPressed","clearValue","newValue","substring","length","document","addEventListener","removeEventListener","value","undefined","startOperation","operation","opType","parseFloat","completeOperation","prevValue","style","App","setButtonWidth","min","max","defaultValue","onChange","target","newWidth","onSliderChange","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.11bfc27a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Button = ({\n  type,\n  onClick = () => null,\n  label,\n  active = false,\n  isKeyPressed = false,\n}) => {\n  let className = type;\n  if (active || isKeyPressed) {\n    className = type + \" active\";\n  }\n  return (\n    <button className={className} onClick={onClick}>\n      {label}\n    </button>\n  );\n};\n\nexport default Button;\n","//* I thought this was going to end up being a bit more complicated than it was.\nimport React from \"react\";\n\nfunction Display({ curValue }) {\n  return (\n    <div className=\"display\">\n      <span>{curValue}</span>\n    </div>\n  );\n}\n\nexport default Display;\n","import React, { useState, useEffect } from \"react\";\nimport Button from \"./Button\";\nimport Display from \"./Display\";\nimport \"./Calculator.css\";\n\nconst Calculator = ({ buttonWidth }) => {\n  //* Value currently displayed on screen\n  const [curValue, setCurValue] = useState(0);\n  //* What state the clear button should be: AC or C\n  const [clearState, setClearState] = useState(\"AC\");\n  //* Hold the previous value in order to perform operations using it\n  const [prevValueState, setPrevValueState] = useState();\n  //* Stores the operation intended to be performed\n  const [storedOp, setStoredOp] = useState();\n  //* Stores operation name, just for CSS styling purposes\n  const [activeOp, setActiveOp] = useState();\n  //* Stores a value in order to perform same operations on subsequent equals button presses\n  const [storedValue, setStoredValue] = useState();\n\n  useEffect(() => {\n    //* Method to listen for keydown presses anywhere on page\n    const handleKeyDown = (e) => {\n      console.log(e.key);\n      if (!isNaN(parseInt(e.key))) {\n        setCurValueFunction(parseInt(e.key));\n      } else {\n        switch (e.key) {\n          case \".\":\n            setCurValueFunction(\".\");\n            break;\n          case \"*\":\n            multiply();\n            break;\n          case \"+\":\n            add();\n            break;\n          case \"-\":\n            subtract();\n            break;\n          case \"/\":\n            divide();\n            break;\n          case \"Enter\":\n            equalPressed();\n            break;\n          case \"Clear\":\n            clearValue();\n            break;\n          case \"Delete\":\n          case \"Backspace\":\n            let newValue = curValue?.substring(0, curValue.length - 1);\n            if (newValue === \"\") newValue = \"0\";\n            if (curValue === \"0\") setCurValueFunction(newValue);\n            setCurValue(newValue);\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return function () {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  });\n\n  const setCurValueFunction = (value) => {\n    if (curValue === 0 || curValue === \"0\") {\n      if (typeof value === \"number\") {\n        setCurValue(value);\n        setClearState(\"C\");\n      } else if (value === \".\") {\n        setCurValue(\"0.\");\n        setClearState(\"C\");\n      }\n    } else {\n      setCurValue(\"\" + curValue + value);\n      setClearState(\"C\");\n    }\n  };\n\n  const clearValue = () => {\n    if (clearState === \"AC\") {\n      setCurValue(0);\n      setPrevValueState(undefined);\n      setActiveOp();\n      setStoredOp();\n    }\n    if (clearState === \"C\") {\n      setCurValue(0);\n      setStoredValue();\n      setClearState(\"AC\");\n    }\n  };\n\n  const startOperation = (operation, opType) => {\n    setStoredValue();\n    setActiveOp(opType);\n    setPrevValueState(parseFloat(curValue));\n    setStoredOp(() => operation);\n    setCurValue(0);\n  };\n\n  const completeOperation = (operation) => {\n    setCurValue(operation(curValue));\n  };\n\n  const equalPressed = () => {\n    if (storedValue) {\n      setCurValue(storedOp(curValue, storedValue));\n    }\n    if (typeof storedOp === \"function\" && !storedValue) {\n      setCurValue(storedOp(prevValueState, curValue));\n      setStoredValue(curValue);\n      setPrevValueState(curValue);\n      setActiveOp();\n    }\n  };\n\n  const multiply = () => {\n    startOperation((prevValue, value) => prevValue * value, \"multiplication\");\n  };\n\n  const divide = () => {\n    startOperation((prevValue, value) => prevValue / value, \"division\");\n  };\n\n  const add = () => {\n    startOperation((prevValue, value) => prevValue + value, \"addition\");\n  };\n\n  const subtract = () => {\n    startOperation((prevValue, value) => prevValue - value, \"subtract\");\n  };\n\n  return (\n    <>\n      <div className=\"wrapper\" style={{ \"--buttonWidth\": buttonWidth }}>\n        <Display curValue={curValue} />\n        <div className=\"button-row\">\n          <Button\n            type=\"function\"\n            onClick={() => clearValue()}\n            label={clearState}\n          />\n          <Button\n            type=\"function\"\n            label=\"+/-\"\n            onClick={() => completeOperation((value) => value * -1)}\n          />\n          <Button\n            type=\"function\"\n            label=\"%\"\n            onClick={() => completeOperation((value) => value * 0.01)}\n          />\n          <Button\n            type=\"operation\"\n            active={activeOp === \"division\"}\n            onClick={divide}\n            label=\"÷\"\n          />\n        </div>\n        <div className=\"button-row\">\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(7)}\n            label=\"7\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(8)}\n            label=\"8\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(9)}\n            label=\"9\"\n          />\n          <Button\n            type=\"operation\"\n            active={activeOp === \"multiplication\"}\n            onClick={multiply}\n            label=\"×\"\n          />\n        </div>\n        <div className=\"button-row\">\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(4)}\n            label=\"4\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(5)}\n            label=\"5\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(6)}\n            label=\"6\"\n          />\n          <Button\n            type=\"operation\"\n            active={activeOp === \"subtract\"}\n            onClick={subtract}\n            label=\"-\"\n          />\n        </div>\n        <div className=\"button-row\">\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(1)}\n            label=\"1\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(2)}\n            label=\"2\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(3)}\n            label=\"3\"\n          />\n          <Button\n            type=\"operation\"\n            active={activeOp === \"addition\"}\n            onClick={add}\n            label=\"+\"\n          />\n        </div>\n        <div className=\"button-row\">\n          <Button\n            type=\"number double bottom-left\"\n            onClick={() => setCurValueFunction(0)}\n            label=\"0\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(\".\")}\n            label=\".\"\n          />\n          <Button\n            type=\"operation bottom-right\"\n            onClick={equalPressed}\n            label=\"=\"\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Calculator;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  //! VARIABLES THAT AFFECT CSS:\n  const [buttonWidth, setButtonWidth] = useState(\"8vw\");\n\n  const onSliderChange = (e) => {\n    console.log(e.target.value);\n    const newWidth = e.target.value + \"vw\";\n\n    setButtonWidth(newWidth);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Calculator</h1>\n        <div className=\"slider-container\">\n          <label>Adjust Size:</label>\n          <br />\n          <input\n            type=\"range\"\n            min=\"5\"\n            max=\"24\"\n            defaultValue=\"8\"\n            onChange={(e) => onSliderChange(e)}\n          />\n        </div>\n        <Calculator buttonWidth={buttonWidth} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}