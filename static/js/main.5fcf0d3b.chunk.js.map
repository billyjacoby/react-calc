{"version":3,"sources":["components/Button.js","utils/useWindowSize.js","components/Calculator.js","App.js","index.js"],"names":["Button","type","onClick","label","active","className","getWindowSize","width","window","innerWidth","height","innerHeight","Calculator","useState","curValue","setCurValue","clearState","setClearState","prevValueState","setPrevValueState","storedOp","setStoredOp","activeOp","setActiveOp","storedValue","setStoredValue","buttonWidth","setButtonWidth","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","windowWidth","console","log","setCurValueFunction","value","startOperation","operation","opType","parseFloat","completeOperation","min","max","defaultValue","onChange","e","target","newWidth","onSliderChange","style","undefined","prevValue","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fcf0d3b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Button = ({ type, onClick = () => null, label, active = false }) => {\n  let className = type;\n  if (active) {\n    className = type + \" active\";\n  }\n  return (\n    <button className={className} onClick={onClick}>\n      {label}\n    </button>\n  );\n};\n\nexport default Button;\n","import { useState, useEffect } from \"react\";\n\nfunction getWindowSize() {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  return { width, height };\n}\n\nexport default function useWindowSize() {\n  const [windowSize, setWindowSize] = useState(getWindowSize());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize(getWindowSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  return windowSize;\n}\n","import React, { useState } from \"react\";\nimport \"./Calculator.css\";\nimport Button from \"./Button\";\n\nimport useWindowSize from \"../utils/useWindowSize\";\n\nconst Calculator = () => {\n  //* Value currently displayed on screen\n  const [curValue, setCurValue] = useState(0);\n  //* What state the clear button should be: AC or C\n  const [clearState, setClearState] = useState(\"AC\");\n  //* Hold the previous value in order to perform operations using it\n  const [prevValueState, setPrevValueState] = useState();\n  //* Stores the operation intended to be performed\n  const [storedOp, setStoredOp] = useState();\n  //* Stores operation name, just for CSS styling purposes\n  const [activeOp, setActiveOp] = useState();\n  //* Stores a value in order to perform same operations on subsequent equals button presses\n  const [storedValue, setStoredValue] = useState();\n\n  //! VARIABLES THAT AFFECT CSS:\n  const [buttonWidth, setButtonWidth] = useState(\"10vw\");\n  // TODO: use this to set the max size of the buttons - 100vw / 4 to rem\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n\n  console.log(windowWidth);\n\n  const setCurValueFunction = (value) => {\n    if (curValue === 0) {\n      if (typeof value === \"number\") {\n        setCurValue(value);\n        setClearState(\"C\");\n      } else if (value === \".\") {\n        setCurValue(\"0.\");\n        setClearState(\"C\");\n      }\n    } else {\n      // TODO: add use case for not clearing screen when there is s storedOp.\n      setCurValue(\"\" + curValue + value);\n      setClearState(\"C\");\n    }\n  };\n\n  const clearValue = () => {\n    if (clearState === \"AC\") {\n      setCurValue(0);\n      setPrevValueState(undefined);\n      setActiveOp();\n      setStoredOp();\n    }\n    if (clearState === \"C\") {\n      setCurValue(0);\n      setStoredValue();\n      setClearState(\"AC\");\n    }\n  };\n\n  const startOperation = (operation, opType) => {\n    setStoredValue();\n    setActiveOp(opType);\n    setPrevValueState(parseFloat(curValue));\n    setStoredOp(() => operation);\n    setCurValue(0);\n  };\n\n  const completeOperation = (operation) => {\n    setCurValue(operation(curValue));\n  };\n\n  const onSliderChange = (e) => {\n    console.log(e.target.value);\n    const newWidth = e.target.value + \"vw\";\n\n    setButtonWidth(newWidth);\n  };\n\n  const equalPressed = () => {\n    if (storedValue) {\n      setCurValue(storedOp(curValue, storedValue));\n    }\n    if (typeof storedOp === \"function\" && !storedValue) {\n      setCurValue(storedOp(prevValueState, curValue));\n      setStoredValue(curValue);\n      setPrevValueState(curValue);\n      setActiveOp();\n    }\n  };\n  return (\n    <>\n      <div className=\"slider-container\">\n        <label>Adjust Size:</label>\n        <br />\n        <input\n          type=\"range\"\n          min=\"10\"\n          max=\"24\"\n          defaultValue=\"10\"\n          onChange={(e) => onSliderChange(e)}\n        />\n      </div>\n\n      <div className=\"wrapper\" style={{ \"--buttonWidth\": buttonWidth }}>\n        <div className=\"display\">\n          <span>{curValue}</span>\n        </div>\n        <div className=\"button-row\">\n          <Button\n            type=\"function\"\n            onClick={() => clearValue()}\n            label={clearState}\n          />\n          <Button\n            type=\"function\"\n            label=\"+/-\"\n            onClick={() => completeOperation((value) => value * -1)}\n          />\n          <Button\n            type=\"function\"\n            label=\"%\"\n            onClick={() => completeOperation((value) => value * 0.01)}\n          />\n          <Button\n            type=\"operation\"\n            active={activeOp === \"division\"}\n            onClick={() =>\n              startOperation(\n                (prevValue, value) => prevValue / value,\n                \"division\"\n              )\n            }\n            label=\"รท\"\n          />\n        </div>\n        <div className=\"button-row\">\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(7)}\n            label=\"7\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(8)}\n            label=\"8\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(9)}\n            label=\"9\"\n          />\n          <Button\n            type=\"operation\"\n            active={activeOp === \"multiplication\"}\n            onClick={() =>\n              startOperation(\n                (prevValue, value) => prevValue * value,\n                \"multiplication\"\n              )\n            }\n            label=\"ร\"\n          />\n        </div>\n        <div className=\"button-row\">\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(4)}\n            label=\"4\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(5)}\n            label=\"5\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(6)}\n            label=\"6\"\n          />\n          <Button\n            type=\"operation\"\n            active={activeOp === \"subtract\"}\n            onClick={() =>\n              startOperation(\n                (prevValue, value) => prevValue - value,\n                \"subtract\"\n              )\n            }\n            label=\"-\"\n          />\n        </div>\n        <div className=\"button-row\">\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(1)}\n            label=\"1\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(2)}\n            label=\"2\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(3)}\n            label=\"3\"\n          />\n          <Button\n            type=\"operation\"\n            active={activeOp === \"addition\"}\n            onClick={() =>\n              startOperation(\n                (prevValue, value) => prevValue + value,\n                \"addition\"\n              )\n            }\n            label=\"+\"\n          />\n        </div>\n        <div className=\"button-row\">\n          <Button\n            type=\"number double bottom-left\"\n            onClick={() => setCurValueFunction(0)}\n            label=\"0\"\n          />\n          <Button\n            type=\"number\"\n            onClick={() => setCurValueFunction(\".\")}\n            label=\".\"\n          />\n          <Button\n            type=\"operation bottom-right\"\n            onClick={equalPressed}\n            label=\"=\"\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Calculator;\n","import \"./App.css\";\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Calculator</h1>\n        <Calculator />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}